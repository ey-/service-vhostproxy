{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
			# {{ .Container.Node.Name }}/{{ .Container.Name }}
			server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
			# {{ .Container.Name }}
			server {{ .Network.IP }}:{{ .Address.Port }};
		{{ end }}
	{{ else if .Network }}
		# {{ .Container.Name }}
		server {{ .Network.IP }} down;
	{{ end }}
{{ end }}

{{ define "http" }}
	# HTTP
	server {
		listen 80;
		{{ range $host := split .Hosts "," }}
			server_name {{ $host }};
		{{ end }}

		location / {
			proxy_pass http://{{ .Upstream }};
		}
	}
{{ end }}

{{ define "https" }}
	# HTTPS
	server {

		listen 443;
		{{ range $host := split .Hosts "," }}
			server_name {{ $host }};
		{{ end }}

		ssl_certificate           {{ .Cert }}
    ssl_certificate_key       {{ .CertKey }};

		ssl on;
		ssl_session_cache  builtin:1000  shared:SSL:10m;
		ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
		ssl_prefer_server_ciphers on;

		location / {
			proxy_pass http://{{ .Upstream }};
		}
	}
{{ end }}


{{ $pr_containers := whereLabelExists $ "com.docker.compose.service" }}

{{ range $hosts, $containers_vhost := groupByLabel $pr_containers "io.docksal.virtual-host" }}

	{{ range $service, $containers := groupByLabel $containers_vhost "com.docker.compose.service" }}

		{{ $pr_container := $containers | first }}
		{{ $project := index $pr_container.Labels "com.docker.compose.project" }}
		{{ $upstream := (print $project "-" $service) }}
		## Reachable via "{{ $project }}_default" network
		upstream {{ $upstream }} {
		{{ range $container := $containers }}
			{{ $addrLen := len $container.Addresses }}

			{{ range $knownNetwork := $CurrentContainer.Networks }}
				{{ range $containerNetwork := $container.Networks }}
					{{ if eq $knownNetwork.Name $containerNetwork.Name }}
						{{/* If only 1 port exposed, use that */}}
						{{ if eq $addrLen 1 }}
							{{ $address := index $container.Addresses 0 }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
						{{ else }}
							{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
							{{ $address := where $container.Addresses "Port" $port | first }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{ end }}
					{{ end }}
				{{ end }}
			{{ end }}
		{{ end }}
		}

		{{ template "http" (dict "Hosts" $hosts "Upstream" $upstream) }}
		{{ $pot_key := (print "/projects/" $project "/certs/server.key") }}
		{{ $pot_crt := (print "/projects/" $project "/certs/server.crt") }}
		{{ if (and (exists $pot_crt) (exists $pot_key)) }}
		    {{ $cert := $pot_crt }}
		    {{ $cert_key := $pot_key }}
			{{ template "https" (dict "Hosts" $hosts "Upstream" $upstream "Cert" $cert "CertKey" $cert_key) }}
		{{ else if (and (exists "/etc/nginx/server.crt") (exists "/etc/nginx/server.key")) }}
		    {{ $cert := "/etc/nginx/server.crt" }}
		    {{ $cert_key := "/etc/nginx/server.key" }}
			{{ template "https" (dict "Hosts" $hosts "Upstream" $upstream "Cert" $cert "CertKey" $cert_key) }}
		    }
		{{ end }}

	{{ end }}

{{ end }}



{{ $d_containers := whereLabelDoesNotExist $ "com.docker.compose.service" }}

{{ range $hosts, $containers := groupByLabel $d_containers "io.docksal.virtual-host" }}

	{{ range $host := split $hosts "," }}

		upstream {{ $host }} {
		{{ range $container := $containers }}
			{{ $addrLen := len $container.Addresses }}

			{{ range $knownNetwork := $CurrentContainer.Networks }}
				{{ range $containerNetwork := $container.Networks }}
					{{ if eq $knownNetwork.Name $containerNetwork.Name }}
						{{/* If only 1 port exposed, use that */}}
						{{ if eq $addrLen 1 }}
							{{ $address := index $container.Addresses 0 }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
						{{ else }}
							{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
							{{ $address := where $container.Addresses "Port" $port | first }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{ end }}
					{{ end }}
				{{ end }}
			{{ end }}
		{{ end }}
		}

		{{ template "http" (dict "Hosts" $host "Upstream" $host) }}

		{{ if (and (exists "/etc/nginx/server.crt") (exists "/etc/nginx/server.key")) }}
			{{ template "https" (dict "Hosts" $host "Upstream" $host) }}
		{{ end }}

	{{ end }}

{{ end }}